openapi: 3.0.3
info:
  title: Cargo Management API
  description: API zur Verwaltung von Schiffen und Containern.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Lokaler Server

paths:
  /ships:
    post:
      summary: Erstelle ein neues Schiff
      tags:
        - Ships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShipInput'
      responses:
        '200':
          description: Schiff erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ship'
        '400':
          description: Validierungsfehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
    get:
      summary: Alle Schiffe abrufen
      tags:
        - Ships
      responses:
        '200':
          description: Liste aller Schiffe
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ship'

  /ships/{id}:
    get:
      summary: Schiff nach ID abrufen
      tags:
        - Ships
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Schiffes
      responses:
        '200':
          description: Schiff gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ship'
        '404':
          description: Schiff nicht gefunden
    put:
      summary: Bestehendes Schiff aktualisieren
      tags:
        - Ships
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Schiffes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShipInput'
      responses:
        '200':
          description: Schiff erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ship'
        '400':
          description: Validierungsfehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
        '404':
          description: Schiff nicht gefunden
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Schiff nach ID löschen
      tags:
        - Ships
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Schiffes
      responses:
        '204':
          description: Schiff erfolgreich gelöscht
        '404':
          description: Schiff nicht gefunden
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string

  /containers:
    post:
      summary: Erstelle einen neuen Container
      tags:
        - Containers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerInput'
      responses:
        '200':
          description: Container erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        '400':
          description: Validierungsfehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
    get:
      summary: Alle Container abrufen
      tags:
        - Containers
      responses:
        '200':
          description: Liste aller Container
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'

  /containers/{id}:
    get:
      summary: Container nach ID abrufen
      tags:
        - Containers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Containers
      responses:
        '200':
          description: Container gefunden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        '404':
          description: Container nicht gefunden
    put:
      summary: Bestehenden Container aktualisieren
      tags:
        - Containers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Containers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerInput'
      responses:
        '200':
          description: Container erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Container'
        '400':
          description: Validierungsfehler
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseError'
        '404':
          description: Container nicht gefunden
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string
    delete:
      summary: Container nach ID löschen
      tags:
        - Containers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Containers
      responses:
        '204':
          description: Container erfolgreich gelöscht
        '404':
          description: Container nicht gefunden
        '500':
          description: Interner Serverfehler
          content:
            text/plain:
              schema:
                type: string

  /containers/ship/{shipId}:
    get:
      summary: Alle Container eines spezifischen Schiffes abrufen
      tags:
        - Containers
      parameters:
        - in: path
          name: shipId
          required: true
          schema:
            type: integer
            format: int64
          description: ID des Schiffes
      responses:
        '200':
          description: Liste der Container des Schiffes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'
        '404':
          description: Schiff nicht gefunden

components:
  schemas:
    Ship:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          maxLength: 255
          example: "Titanic"
        capacity:
          type: integer
          example: 1000
        currentLocationName:
          type: string
          maxLength: 255
          example: "Port of Southampton"
        status:
          type: string
          enum:
            - DOCKED
            - AT_SEA
            - UNDER_MAINTENANCE
          example: "AT_SEA"
        containers:
          type: array
          items:
            $ref: '#/components/schemas/Container'
      required:
        - id
        - name
        - capacity
        - currentLocationName
        - status

    ShipInput:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          example: "Titanic"
        capacity:
          type: integer
          example: 1000
        currentLocationName:
          type: string
          maxLength: 255
          example: "Port of Southampton"
        status:
          type: string
          enum:
            - DOCKED
            - AT_SEA
            - UNDER_MAINTENANCE
          example: "AT_SEA"
      required:
        - name
        - capacity
        - currentLocationName
        - status

    Container:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          maxLength: 500
          example: "Electronics"
        weight:
          type: number
          format: double
          example: 5000.5
        ship:
          $ref: '#/components/schemas/Ship'
      required:
        - id
        - description
        - weight
        - ship

    ContainerInput:
      type: object
      properties:
        description:
          type: string
          maxLength: 500
          example: "Electronics"
        weight:
          type: number
          format: double
          example: 5000.5
        ship:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
          required:
            - id
      required:
        - description
        - weight
        - ship

    ResponseError:
      type: object
      properties:
        fieldErrors:
          type: object
          additionalProperties:
            type: string
          example:
            name: "Ship name cannot be null"
            capacity: "Capacity cannot be null"
        error:
          type: string
          example: "An unexpected error occurred."
      oneOf:
        - required: [fieldErrors]
        - required: [error]
